{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Debug",
            "type": "cppdbg",
            "request": "launch",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "linux": {
                "MIMode": "gdb",
                "miDebuggerPath": "gdb",
                "program": "${workspaceFolder}/${fileBasenameNoExtension}"
            },
            "preLaunchTask": "C/C++: g++ build active file"
        },
        {
            "name": "Debug RSControl",
            "type": "cppdbg",
            "request": "launch",
            // Resolved by CMake Tools:
            "program": "${command:cmake.launchTargetPath}",

            /* --cameraURL		that's where the camera can be reached
            * --mowerURL		that's where the mover can be controlled 
            * --mode			one of the operating modes: 
            *						modeTestCamera:		just to test vision system
            *						modeAnalyseImage:	analyse a given image
            *						modeTrack:			just track an object on camera
            *					if no mode is specified, the mover will be controlled.
            *
            * --image			for debugging purpose, an image that wants to be analysed
            * --simulateSheep	for testing, starts a virtual sheep that prints itself 
            *					onto the camera image 
            */            
            "args": ["--mode modeTestCamera",
                "--cameraURL http://192.168.1.124/video.cgi?x.mjpg",
                "--mowerURL http://192.168.0.112/",
                "--simulateSheep true"
            ],

            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [
                {
                    // add the directory where our target was built to the PATHs
                    // it gets resolved by CMake Tools:
                    "name": "PATH",
                    "value": "$PATH:${command:cmake.launchTargetDirectory}"
                },
                {
                    "name": "OTHER_VALUE",
                    "value": "Something something"
                }
            ],
            "externalConsole": true,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        }        
    ]
}